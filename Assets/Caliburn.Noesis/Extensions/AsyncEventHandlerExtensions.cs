namespace Caliburn.Noesis.Extensions
{
    #region Using Directives

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Cysharp.Threading.Tasks;

    #endregion

    /// <summary>Provides extension methods for the <see cref="AsyncEventHandler{TEventArgs}" /> type.</summary>
    public static class AsyncEventHandlerExtensions
    {
        #region Public Methods

        /// <summary>Gets all the event handlers attached to this delegate instance.</summary>
        /// <param name="handler">The event handler delegate instance.</param>
        /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
        /// <returns>All event handlers attached to the delegate instance.</returns>
        public static IEnumerable<AsyncEventHandler<TEventArgs>> GetHandlers<TEventArgs>(
            this AsyncEventHandler<TEventArgs> handler)
            where TEventArgs : EventArgs
        {
            return handler.GetInvocationList().Cast<AsyncEventHandler<TEventArgs>>();
        }

        /// <summary>Invokes all event handlers asynchronously.</summary>
        /// <param name="handler">The event handler delegate instance.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
        /// <returns>A task that represents the asynchronous execution of all event handlers.</returns>
        public static UniTask InvokeAllAsync<TEventArgs>(this AsyncEventHandler<TEventArgs> handler,
                                                         object sender,
                                                         TEventArgs e)
            where TEventArgs : EventArgs
        {
            return UniTask.WhenAll(
                Enumerable.Select(handler.GetHandlers(), handleAsync => handleAsync(sender, e)));
        }

        #endregion
    }
}